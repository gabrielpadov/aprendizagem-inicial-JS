// Dados das li√ß√µes
const lessons = [
  {
    title: "Introdu√ß√£o ao JavaScript e Console.log",
    content: `
        <p>JavaScript √© uma linguagem de programa√ß√£o vers√°til que permite criar funcionalidades interativas em p√°ginas web e aplica√ß√µes.</p>
        
        <p>O <code>console.log()</code> √© uma das ferramentas mais importantes para aprendizado e debugging em JavaScript. Ele nos permite:</p>
        <ul>
            <li>Exibir mensagens e resultados no console do navegador</li>
            <li>Depurar e entender como nosso c√≥digo est√° funcionando</li>
            <li>Testar valores e verificar o fluxo do programa</li>
            <li>Acompanhar o progresso da execu√ß√£o do c√≥digo</li>
        </ul>

        <p>Nesta primeira li√ß√£o, vamos explorar as diversas formas de usar o <code>console.log()</code> para nos auxiliar na aprendizagem de JavaScript.</p>

        <h3>Exemplos B√°sicos:</h3>
        <pre>// Mensagem simples
console.log("Ol√°, Mundo!");

// Exibindo vari√°veis
let nome = "Gabriel";
console.log(nome);

// M√∫ltiplos valores
let idade = 25;
console.log("Nome:", nome, "Idade:", idade);</pre>

        <h3>Concatena√ß√£o:</h3>
        <pre>// Concatena√ß√£o tradicional
console.log("Ol√°, " + nome + "! Voc√™ tem " + idade + " anos.");

// Calculando dentro do console.log
console.log("Daqui a 5 anos voc√™ ter√° " + (idade + 5) + " anos.");</pre>

        <h3>Quebras de Linha e Organiza√ß√£o:</h3>
        <pre>// Quebras de linha com \\n
console.log("Primeira linha\\nSegunda linha\\nTerceira linha");

// Separadores para organizar a sa√≠da
console.log("=== IN√çCIO DO PROGRAMA ===");
console.log("Processando dados...");
console.log("=== FIM DO PROGRAMA ===");

// Tabelas para dados estruturados
let usuarios = [
    { nome: "Ana", idade: 30, cidade: "S√£o Paulo" },
    { nome: "Carlos", idade: 25, cidade: "Rio de Janeiro" }
];
console.table(usuarios);</pre>

        <h3>Exerc√≠cio Pr√°tico:</h3>
        <p>Tente criar um programa que:</p>
        <ol>
            <li>Exiba uma mensagem de boas-vindas</li>
            <li>Use concatena√ß√£o para criar uma frase com vari√°veis</li>
            <li>Mostre informa√ß√µes formatadas com estilos</li>
            <li>Use quebras de linha para organizar a sa√≠da</li>
        </ol>
    `,
    markdownFile: null,
    code: `// Escreva seu c√≥digo JavaScript aqui
console.log("Ol√°, Mundo!");

// Exemplo de concatena√ß√£o
let nome = "Estudante";
let linguagem = "JavaScript";
console.log("Ol√°, " + nome + "! Bem-vindo ao mundo do " + linguagem + "!");

// Exemplo com quebra de linha
console.log("Primeira linha\\nSegunda linha");

// Experimente criar suas pr√≥prias mensagens!`,
    hint: ` Use concatena√ß√£o com o operador + para juntar textos e vari√°veis. Use \\n para quebras de linha.
    \n console.log("üöÄ Bem-vindo ao JavaScript!");\n
let aluno = "Voc√™";
let curso = "JavaScript";
console.log("Ol√°, " + aluno + "!\\n Voc√™ est√° aprendendo " + curso + "!");

console.log("=== DESAFIO COMPLETO ===");`,
    solution: `console.log("Bem-vindo ao JavaScript!");

let aluno = "Voc√™";
let curso = "JavaScript";
console.log("Ol√°, " + aluno + "!\\n Voc√™ est√° aprendendo " + curso + "!");

console.log("=== DESAFIO COMPLETO ===");`,
  },
  //   {
  //     title: "Entrada de Dados com Prompt",
  //     content: `
  //         <p>Em JavaScript, podemos interagir com o usu√°rio atrav√©s de caixas de di√°logo. Uma das fun√ß√µes mais √∫teis para isso √© o <code>prompt()</code>.</p>

  //         <h3>O que √© o prompt()?</h3>
  //         <p>O <code>prompt()</code> √© uma fun√ß√£o built-in do JavaScript que exibe uma caixa de di√°logo para o usu√°rio inserir dados:</p>
  //         <pre>let nome = prompt("Por favor, digite seu nome:");
  // console.log("Ol√°, " + nome + "!");</pre>

  //         <h3>Sintaxe B√°sica</h3>
  //         <pre>let variavel = prompt(mensagem, valorPadrao);</pre>
  //         <ul>
  //             <li><code>mensagem</code>: Texto que ser√° exibido para o usu√°rio</li>
  //             <li><code>valorPadrao</code> (opcional): Valor pr√©-definido no campo de entrada</li>
  //             <li>Retorna: O valor digitado pelo usu√°rio ou <code>null</code> se cancelado</li>
  //         </ul>

  //         <!-- Continue com o restante do conte√∫do em HTML -->
  //     `,
  //     markdownFile: null, // N√£o usar arquivo externo
  //     code: `// Exemplo de uso do prompt
  // let nome = prompt("Qual √© o seu nome?");
  // if (nome) {
  //     console.log("Ol√°, " + nome + "!");
  // } else {
  //     console.log("Voc√™ n√£o digitou um nome.");
  // }`,
  //     hint: "Use prompt() para receber entrada do usu√°rio e sempre valide se n√£o √© null ou vazio.",
  //     solution: `let nome = prompt("Qual √© o seu nome?");
  // if (nome && nome.trim() !== "") {
  //     console.log("Ol√°, " + nome.trim() + "!");
  // } else {
  //     console.log("Nome inv√°lido ou n√£o fornecido.");
  // }`,
  //   },
  // {
  //   title: "Vari√°veis e Tipos de Dados",
  //   content: `
  //                   <p>Vari√°veis s√£o containers que armazenam valores. Em JavaScript, usamos <code>let</code>, <code>const</code> ou <code>var</code> para declarar vari√°veis.</p>
  //                   <p>JavaScript tem v√°rios tipos de dados: n√∫meros, strings, booleanos, arrays, objetos e mais.</p>
  //                   <p>Exemplo:</p>
  //                   <pre>let nome = "Gabriel";\nconst idade = 30;\nvar ehEstudante = true;</pre>
  //                   <p>Crie uma vari√°vel chamada 'mensagem' que cont√©m o texto "JavaScript √© incr√≠vel!" e exiba no console.</p>
  //               `,
  //   code: `// Crie uma vari√°vel e exiba seu conte√∫do\nlet mensagem = "JavaScript √© legal!";\nconsole.log(mensagem);`,
  //   hint: "Use let mensagem = 'JavaScript √© incr√≠vel!'; seguido de console.log(mensagem);",
  //   solution: `let mensagem = "JavaScript √© incr√≠vel!";\nconsole.log(mensagem);`,
  // },
  {
    title: "Vari√°veis e Tipos de Dados em JavaScript",
    content: `
        <p>Vari√°veis s√£o como caixas nomeadas usadas para armazenar dados que poder√£o ser reutilizados, modificados ou apenas lidos durante a execu√ß√£o de um programa.</p>
        
        <h3>üß™ Tipos de dados em JavaScript</h3>
        <p>Os principais tipos de dados que podemos armazenar em vari√°veis s√£o:</p>
        
        <table border="1" style="width: 100%; border-collapse: collapse; margin: 15px 0;">
            <tr style="background-color: #f0f0f0;">
                <th style="padding: 8px;">Tipo</th>
                <th style="padding: 8px;">Exemplo</th>
                <th style="padding: 8px;">Descri√ß√£o</th>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>number</code></td>
                <td style="padding: 8px;"><code>42, 3.14</code></td>
                <td style="padding: 8px;">N√∫meros inteiros ou decimais</td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>string</code></td>
                <td style="padding: 8px;"><code>'Ol√°', "Mundo"</code></td>
                <td style="padding: 8px;">Sequ√™ncia de caracteres (texto)</td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>boolean</code></td>
                <td style="padding: 8px;"><code>true, false</code></td>
                <td style="padding: 8px;">Valor l√≥gico: verdadeiro ou falso</td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>object</code></td>
                <td style="padding: 8px;"><code>{ nome: 'Ana' }</code></td>
                <td style="padding: 8px;">Estrutura de dados com propriedades</td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>array</code></td>
                <td style="padding: 8px;"><code>[1, 2, 3]</code></td>
                <td style="padding: 8px;">Lista ordenada de valores</td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>null</code></td>
                <td style="padding: 8px;"><code>null</code></td>
                <td style="padding: 8px;">Valor nulo intencional</td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>undefined</code></td>
                <td style="padding: 8px;"><code>undefined</code></td>
                <td style="padding: 8px;">Vari√°vel declarada mas sem valor atribu√≠do</td>
            </tr>
        </table>

        <div class="warning">
            <p>üîç <strong>JavaScript n√£o √© fortemente tipado:</strong> uma mesma vari√°vel pode mudar de tipo durante a execu√ß√£o (embora isso n√£o seja recomendado).</p>
        </div>

        <h3>‚úèÔ∏è Declarando vari√°veis</h3>
        <p>Em JavaScript, podemos declarar vari√°veis com as palavras-chave:</p>
        
        <ul>
            <li><code>var</code> ‚Üí mais antiga, com escopo de fun√ß√£o. <span style="color: #d32f2f;">(Evite usar)</span></li>
            <li><code>let</code> ‚Üí moderna, com escopo de bloco. <span style="color: #388e3c;">(Recomendada)</span></li>
            <li><code>const</code> ‚Üí valor constante (n√£o pode ser re-atribu√≠do). <span style="color: #388e3c;">(Recomendada)</span></li>
        </ul>

        <pre>// Exemplos de declara√ß√£o:
var nomeAntigo = "Gabriel";        // N√£o recomendado
let idade = 30;                 // Vari√°vel que pode mudar
const PI = 3.14;                // Valor constante</pre>

        <div class="tip">
            <p>üí° <strong>Dica:</strong> Use <code>let</code> para vari√°veis que podem mudar e <code>const</code> para valores fixos. Evite <code>var</code>, exceto em c√≥digos legados.</p>
        </div>

        <h3>üîÑ Atualizando vari√°veis</h3>
        <p>Voc√™ pode atualizar o valor de uma vari√°vel declarada com <code>let</code>:</p>
        <pre>let contador = 0;
contador = 1;     // ‚úÖ Permitido
contador = 5;     // ‚úÖ Permitido</pre>

        <p>Mas n√£o pode reatribuir vari√°veis <code>const</code>:</p>
        <pre>const PI = 3.14;
PI = 3.1415;      // ‚ùå Erro! N√£o √© permitido.</pre>

        <h3>üß™ Exemplo pr√°tico completo</h3>
        <pre>// Diferentes tipos de dados
let numero = 42;                    // number
let texto = "JavaScript";           // string  
let ativo = true;                   // boolean
let pessoa = { nome: "Maria" };     // object
let lista = [1, 2, 3];              // array
let vazio = null;                   // null
let indefinido;                     // undefined

// Exibindo no console
console.log('N√∫mero:', numero);
console.log('Texto:', texto);
console.log('Ativo:', ativo);
console.log('Pessoa:', pessoa);
console.log('Lista:', lista);
console.log('Vazio:', vazio);
console.log('Indefinido:', indefinido);</pre>

        <h3>üß© Tipagem din√¢mica</h3>
        <p>JavaScript permite que vari√°veis mudem de tipo, mas isso n√£o √© recomendado:</p>
        <pre>let valor = 30;          // number
valor = "trinta";      // agora √© string - ‚ö†Ô∏è poss√≠vel, mas evite</pre>

        <div class="warning">
            <p>üß† <strong>Boa pr√°tica:</strong> N√£o altere o tipo da vari√°vel ap√≥s a declara√ß√£o. Prefira manter o tipo consistente.</p>
        </div>

        <h3>üéØ Exerc√≠cio Pr√°tico</h3>
        <p>Crie vari√°veis para armazenar diferentes tipos de dados:</p>
        <ol>
            <li>Uma string com uma mensagem motivacional</li>
            <li>Um n√∫mero representando sua idade</li>
            <li>Um boolean indicando se voc√™ √© estudante</li>
            <li>Exiba todas as vari√°veis no console</li>
        </ol>
    `,
    code: `// Crie vari√°veis com diferentes tipos de dados
let mensagem = "JavaScript √© incr√≠vel!";
let idade = 30;
let ehEstudante = true;

// Exiba os valores no console
console.log("Mensagem:", mensagem);
console.log("Idade:", idade);
console.log("√â estudante:", ehEstudante);`,
    hint: "Use let para declarar vari√°veis. Lembre-se: strings usam aspas, n√∫meros n√£o, booleanos s√£o true ou false sem aspas.",
    solution: `let mensagem = "JavaScript √© incr√≠vel!";
let idade = 25;
let ehEstudante = true;

console.log("Mensagem:", mensagem);
console.log("Idade:", idade);
console.log("√â estudante:", ehEstudante);

// B√¥nus: mostrando os tipos
console.log("Tipo da mensagem:", typeof mensagem);
console.log("Tipo da idade:", typeof idade);
console.log("Tipo de ehEstudante:", typeof ehEstudante);`,
  },
  // {
  //   title: "Estruturas Condicionais",
  //   content: `
  //                   <p>As estruturas condicionais permitem que seu c√≥digo tome decis√µes com base em condi√ß√µes.</p>
  //                   <p>Use <code>if</code>, <code>else if</code> e <code>else</code> para controlar o fluxo do seu programa.</p>
  //                   <p>Exemplo:</p>
  //                   <pre>let idade = 18;\nif (idade >= 18) {\n  console.log("Voc√™ √© maior de idade");\n} else {\n  console.log("Voc√™ √© menor de idade");\n}</pre>
  //                   <p>Crie um programa que verifica se um n√∫mero √© positivo, negativo ou zero.</p>
  //               `,
  //   code: `let idade = 18;\nif (idade >= 18) {\n  console.log("Voc√™ √© maior de idade");\n} else {\n  console.log("Voc√™ √© menor de idade");\n}`,
  //   hint: "Use if (numero > 0) para positivo, else if (numero < 0) para negativo, e else para zero.",
  //   solution: `let numero = 5;\nif (numero > 0) {\n  console.log("Positivo");\n} else if (numero < 0) {\n  console.log("Negativo");\n} else {\n  console.log("Zero");\n}`,
  // },
  {
    title: "Estruturas Condicionais em JavaScript",
    content: `
        <p>As estruturas condicionais permitem que seu c√≥digo tome decis√µes com base em condi√ß√µes, executando diferentes blocos de c√≥digo dependendo de situa√ß√µes espec√≠ficas.</p>
        
        <h3>üìä Tipos de Condicionais</h3>
        
        <h3>1. if / else if / else</h3>
        <p>Usado para verificar m√∫ltiplas condi√ß√µes em sequ√™ncia:</p>
        <pre>let idade = 18;

if (idade >= 18) {
    console.log("Voc√™ √© maior de idade");
} else {
    console.log("Voc√™ √© menor de idade");
}</pre>

        <h3>2. switch / case</h3>
        <p>Ideal para quando voc√™ precisa verificar uma vari√°vel contra m√∫ltiplos valores espec√≠ficos:</p>
        <pre>let diaDaSemana = 3;
let nomeDia;

switch (diaDaSemana) {
    case 1:
        nomeDia = "Domingo";
        break;
    case 2:
        nomeDia = "Segunda-feira";
        break;
    case 3:
        nomeDia = "Ter√ßa-feira";
        break;
    case 4:
        nomeDia = "Quarta-feira";
        break;
    case 5:
        nomeDia = "Quinta-feira";
        break;
    case 6:
        nomeDia = "Sexta-feira";
        break;
    case 7:
        nomeDia = "S√°bado";
        break;
    default:
        nomeDia = "Dia inv√°lido";
}

console.log("Hoje √© " + nomeDia);</pre>

        <div class="warning">
            <p>‚ö†Ô∏è <strong>Importante:</strong> Sempre use <code>break</code> ap√≥s cada <code>case</code> para evitar que o c√≥digo execute os casos seguintes (fen√¥meno chamado "fall-through").</p>
        </div>

        <h3>3. Operador Tern√°rio</h3>
        <p>Forma compacta para decis√µes simples:</p>
        <pre>let idade = 20;
let status = idade >= 18 ? "Maior de idade" : "Menor de idade";
console.log(status);</pre>

        <h3>üîÑ Quando usar cada estrutura</h3>
        <table border="1" style="width: 100%; border-collapse: collapse; margin: 15px 0;">
            <tr style="background-color: #f0f0f0;">
                <th style="padding: 8px;">Estrutura</th>
                <th style="padding: 8px;">Quando usar</th>
                <th style="padding: 8px;">Exemplo</th>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>if/else</code></td>
                <td style="padding: 8px;">Condi√ß√µes complexas ou baseadas em ranges</td>
                <td style="padding: 8px;"><code>if (idade > 18 && idade < 65)</code></td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>switch/case</code></td>
                <td style="padding: 8px;">M√∫ltiplos valores espec√≠ficos para uma vari√°vel</td>
                <td style="padding: 8px;"><code>case "A": case "B": case "C":</code></td>
            </tr>
            <tr>
                <td style="padding: 8px;"><code>tern√°rio</code></td>
                <td style="padding: 8px;">Decis√µes simples de uma linha</td>
                <td style="padding: 8px;"><code>condicao ? valor1 : valor2</code></td>
            </tr>
        </table>

        <h3>üß™ Exemplos Pr√°ticos</h3>

        <h3>Exemplo 1: Verificador de Notas</h3>
        <pre>let nota = 85;
let conceito;

if (nota >= 90) {
    conceito = "A";
} else if (nota >= 80) {
    conceito = "B";
} else if (nota >= 70) {
    conceito = "C";
} else if (nota >= 60) {
    conceito = "D";
} else {
    conceito = "F";
}

console.log("Conceito: " + conceito);</pre>

        <h3>Exemplo 2: Dias da Semana com Switch</h3>
        <pre>let dia = "Segunda";
let mensagem;

switch (dia) {
    case "Segunda":
        mensagem = "In√≠cio da semana! üí™";
        break;
    case "Sexta":
        mensagem = "Sextou! üéâ";
        break;
    case "S√°bado":
    case "Domingo":
        mensagem = "Fim de semana! üèñÔ∏è";
        break;
    default:
        mensagem = "Dia de semana normal";
}

console.log(mensagem);</pre>

        <h3>Exemplo 3: Calculadora com Switch</h3>
        <pre>let num1 = 10;
let num2 = 5;
let operacao = "+";
let resultado;

switch (operacao) {
    case "+":
        resultado = num1 + num2;
        break;
    case "-":
        resultado = num1 - num2;
        break;
    case "*":
        resultado = num1 * num2;
        break;
    case "/":
        resultado = num2 !== 0 ? num1 / num2 : "Erro: divis√£o por zero";
        break;
    default:
        resultado = "Opera√ß√£o inv√°lida";
}

console.log("Resultado: " + resultado);</pre>

        <h3>üéØ Exerc√≠cios Pr√°ticos</h3>
        
        <h3>Exerc√≠cio 1: Verificador de N√∫meros</h3>
        <p>Crie um programa que verifica se um n√∫mero √© positivo, negativo ou zero.</p>

        <h3>Exerc√≠cio 2: Sistema de Notas</h3>
        <p>Crie um programa que converte notas num√©ricas em conceitos (A, B, C, D, F).</p>

        <h3>Exerc√≠cio 3: Dia da Semana</h3>
        <p>Crie um programa que recebe um n√∫mero de 1 a 7 e retorna o nome do dia da semana.</p>
    `,
    code: `// Exerc√≠cio 1: Verifique se um n√∫mero √© positivo, negativo ou zero
let numero = 5;

// Seu c√≥digo aqui...

// Exerc√≠cio 2: Converta notas para conceitos
let nota = 85;

// Seu c√≥digo aqui...

// Exerc√≠cio 3: Dia da semana
let diaNumero = 3;

// Seu c√≥digo aqui...`,
    hint: "Use if/else para o exerc√≠cio 1, if/else if/else para o exerc√≠cio 2, e switch/case para o exerc√≠cio 3. Lembre-se do break no switch!",
    solution: `// Exerc√≠cio 1: Verificador de n√∫meros
let numero = 5;

if (numero > 0) {
    console.log("Positivo");
} else if (numero < 0) {
    console.log("Negativo");
} else {
    console.log("Zero");
}

// Exerc√≠cio 2: Sistema de notas
let nota = 85;
let conceito;

if (nota >= 90) {
    conceito = "A";
} else if (nota >= 80) {
    conceito = "B";
} else if (nota >= 70) {
    conceito = "C";
} else if (nota >= 60) {
    conceito = "D";
} else {
    conceito = "F";
}

console.log("Conceito: " + conceito);

// Exerc√≠cio 3: Dia da semana
let diaNumero = 3;
let diaNome;

switch (diaNumero) {
    case 1:
        diaNome = "Domingo";
        break;
    case 2:
        diaNome = "Segunda-feira";
        break;
    case 3:
        diaNome = "Ter√ßa-feira";
        break;
    case 4:
        diaNome = "Quarta-feira";
        break;
    case 5:
        diaNome = "Quinta-feira";
        break;
    case 6:
        diaNome = "Sexta-feira";
        break;
    case 7:
        diaNome = "S√°bado";
        break;
    default:
        diaNome = "Dia inv√°lido";
}

console.log("Dia: " + diaNome);`,
  },
  // {
  //   title: "Loops e Itera√ß√£o",
  //   content: `
  //                   <p>Loops permitem executar um bloco de c√≥digo v√°rias vezes.</p>
  //                   <p>JavaScript suporta v√°rios tipos de loops: <code>for</code>, <code>while</code>, <code>do while</code>.</p>
  //                   <p>Exemplo de for loop:</p>
  //                   <pre>for (let i = 0; i < 5; i++) {\n  console.log("N√∫mero: " + i);\n}</pre>
  //                   <p>Crie um loop que exiba os n√∫meros de 1 a 10 no console.</p>
  //               `,
  //   code: `// Use um loop para exibir n√∫meros de 1 a 5\nfor (let i = 0; i < 5; i++) {\n  console.log("N√∫mero: " + i);\n};`,
  //   hint: "Use for (let i = 1; i <= 10; i++) { console.log(i); }",
  //   solution: `for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}`,
  // },
  {
    title: "Loops e Itera√ß√£o",
    content: `
      <p>Loops permitem executar um bloco de c√≥digo v√°rias vezes.</p>
      <p>JavaScript suporta v√°rios tipos de loops: <code>for</code>, <code>while</code>, <code>do while</code>.</p>
      <p><b>Exemplo de for loop:</b></p>
      <pre>for (let i = 0; i < 5; i++) {
  console.log("N√∫mero: " + i);
}</pre>

      <p><b>Exemplo de while loop:</b></p>
      <pre>let j = 0;
while (j < 3) {
  console.log("Contagem: " + j);
  j++;
}</pre>

      <p><b>Exemplo de do...while loop:</b></p>
      <pre>let k = 0;
do {
  console.log("Executa pelo menos uma vez, k = " + k);
  k++;
} while (k < 3);</pre>

      <p>üí° O <code>do...while</code> garante que o bloco de c√≥digo ser√° executado pelo menos uma vez, 
      mesmo que a condi√ß√£o seja falsa j√° na primeira verifica√ß√£o.</p>

      <p><b>Exerc√≠cio 1:</b> Crie um loop que exiba os n√∫meros de 1 a 10 no console.<code>for</code></p>
      <p><b>Exerc√≠cio 2:</b> Crie um loop que exiba os n√∫meros de 1 a 10 no console usando <code>do...while</code>.</p>
  `,
    code: `// (EXEMPLO) Use um loop para exibir n√∫meros de 1 a 5
for (let i = 0; i < 5; i++) {
  console.log("N√∫mero: " + i);
};\n
// Exerc√≠cio 1:

// Seu c√≥digo aqui...

// Exerc√≠cio 2:

// Seu c√≥digo aqui...
`,
    hint: "Use do { ... } while (condi√ß√£o);",
    solution: `
    for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}
    let i = 1;
do {
  console.log(i);
  i++;
} while (i <= 10);`,
  },
  // {
  //   title: "Fun√ß√µes",
  //   content: `
  //                   <p>Fun√ß√µes s√£o blocos de c√≥digo reutiliz√°veis que realizam uma tarefa espec√≠fica.</p>
  //                   <p>Elas ajudam a organizar o c√≥digo e evitar repeti√ß√£o.</p>
  //                   <p>Exemplo:</p>
  //                   <pre>function cumprimentar(nome) {\n  return "Ol√°, " + nome + "!";\n}\n\nconsole.log(cumprimentar("Maria"));</pre>
  //                   <p>Crie uma fun√ß√£o chamada 'dobro' que recebe um n√∫mero e retorna o dobro desse n√∫mero.</p>
  //               `,
  //   code: `// Crie a fun√ß√£o dobro aqui\nfunction cumprimentar(nome) {\n  return "Ol√°, " + nome + "!";\n}\n\nconsole.log(cumprimentar("Maria"));`,
  //   hint: "A fun√ß√£o deve ser: function dobro(numero) { return numero * 2; }",
  //   solution: `function dobro(numero) {\n  return numero * 2;\n}\n\nconsole.log(dobro(5));`,
  // },
  {
    title: "Fun√ß√µes e Escopo",
    content: `
      <p>Fun√ß√µes s√£o blocos de c√≥digo reutiliz√°veis que realizam uma tarefa espec√≠fica.</p>
      <p>Elas ajudam a organizar o c√≥digo e evitar repeti√ß√£o.</p>
      
      <p><b>Exemplo de fun√ß√£o simples:</b></p>
      <pre>function cumprimentar(nome) {
  return "Ol√°, " + nome + "!";
}

console.log(cumprimentar("Maria"));</pre>

      <p><b>Exerc√≠cio:</b> Crie uma fun√ß√£o chamada <code>dobro</code> que recebe um n√∫mero e retorna o dobro desse n√∫mero.</p>

      <hr />

      <h3>üìå Escopo em JavaScript</h3>
      <p>Escopo √© o contexto em que uma vari√°vel est√° dispon√≠vel para ser acessada no c√≥digo. 
      Em JavaScript, o escopo determina onde e quando voc√™ pode acessar uma vari√°vel ‚Äî dentro de fun√ß√µes, blocos ou globalmente.</p>
      <p>Em termos simples: escopo √© o "alcance" da vari√°vel no seu c√≥digo.</p>

      <h4>üîç Tipos de escopo</h4>
      <ul>
        <li><b>Global:</b> a vari√°vel √© acess√≠vel em qualquer parte do c√≥digo</li>
        <li><b>Local (de fun√ß√£o):</b> a vari√°vel √© acess√≠vel somente dentro da fun√ß√£o em que foi declarada</li>
        <li><b>De bloco (com <code>let</code> e <code>const</code>):</b> a vari√°vel existe apenas dentro de um bloco <code>{}</code> (como if, for, etc.)</li>
      </ul>

      <h4>üß™ Exemplo pr√°tico de escopo</h4>
      <pre>var myVariable = 'global';
myOtherVariable = 'global';

function myFunction() {
  var myVariable = 'local';
  return myVariable;
}

function myOtherFunction() {
  myOtherVariable = 'local';
  return myOtherVariable;
}

console.log(myVariable);         // {1}
console.log(myFunction());       // {2}
console.log(myOtherVariable);    // {3}
console.log(myOtherFunction());  // {4}
console.log(myOtherVariable);    // {5}</pre>

      <h4>üîé Explica√ß√£o passo a passo</h4>
      <table border="1" cellpadding="5" cellspacing="0">
        <tr><th>Linha</th><th>Sa√≠da</th><th>Explica√ß√£o</th></tr>
        <tr><td>{1}</td><td>'global'</td><td><code>myVariable</code> declarada com var fora de fun√ß√µes √© global</td></tr>
        <tr><td>{2}</td><td>'local'</td><td>dentro de <code>myFunction</code>, foi criada uma nova vari√°vel local com o mesmo nome</td></tr>
        <tr><td>{3}</td><td>'global'</td><td><code>myOtherVariable</code> foi criada globalmente (sem var)</td></tr>
        <tr><td>{4}</td><td>'local'</td><td>em <code>myOtherFunction</code>, o valor global de <code>myOtherVariable</code> foi alterado</td></tr>
        <tr><td>{5}</td><td>'local'</td><td>o valor global de <code>myOtherVariable</code> agora √© 'local'</td></tr>
      </table>
  `,
    code: `// Exemplo de fun√ß√£o simples
function cumprimentar(nome) {
  return "Ol√°, " + nome + "!";
}

console.log(cumprimentar("Maria"));`,
    hint: "A fun√ß√£o deve ser: function dobro(numero) { return numero * 2; }",
    solution: `function dobro(numero) {
  return numero * 2;
}

console.log(dobro(5));`,
  },

  // Li√ß√µes de HTML & CSS
  //   {
  //     title: "Estrutura HTML",
  //     content: `
  //                     <p>HTML (HyperText Markup Language) √© a linguagem de marca√ß√£o usada para criar p√°ginas web.</p>
  //                     <p>Um documento HTML b√°sico consiste em elementos que definem a estrutura do conte√∫do.</p>
  //                     <p>Exemplo:</p>
  //                     <pre>&lt;!DOCTYPE html&gt;
  // &lt;html&gt;
  // &lt;head&gt;
  //     &lt;title&gt;T√≠tulo da P√°gina&lt;/title&gt;
  // &lt;/head&gt;
  // &lt;body&gt;
  //     &lt;h1&gt;Meu Primeiro Cabe√ßalho&lt;/h1&gt;
  //     &lt;p&gt;Meu primeiro par√°grafo.&lt;/p&gt;
  // &lt;/body&gt;
  // &lt;/html&gt;</pre>
  //                     <p>Crie a estrutura b√°sica de uma p√°gina HTML.</p>
  //                 `,
  //     code: `// Para HTML, voc√™ precisaria de um editor diferente\nconsole.log("Esta li√ß√£o √© sobre HTML");`,
  //     hint: "Comece com a declara√ß√£o DOCTYPE e adicione os elementos html, head e body.",
  //     solution: `console.log("Estrutura HTML b√°sica criada");`,
  //   },
  // ... outras li√ß√µes (o array continuaria com todas as 15 li√ß√µes)
  {
    title: "Entrada de Dados com Prompt",
    content: `
        <p>Em JavaScript, podemos interagir com o usu√°rio atrav√©s de caixas de di√°logo. Uma das fun√ß√µes mais √∫teis para isso √© o <code>prompt()</code>.</p>
        
        <h3>O que √© o prompt()?</h3>
        <p>O <code>prompt()</code> √© uma fun√ß√£o built-in do JavaScript que exibe uma caixa de di√°logo para o usu√°rio inserir dados:</p>
        <pre>let nome = prompt("Por favor, digite seu nome:");
console.log("Ol√°, " + nome + "!");</pre>
        
        <h3>Sintaxe B√°sica</h3>
        <pre>let variavel = prompt(mensagem, valorPadrao);</pre>
        <ul>
            <li><code>mensagem</code>: Texto que ser√° exibido para o usu√°rio</li>
            <li><code>valorPadrao</code> (opcional): Valor pr√©-definido no campo de entrada</li>
            <li>Retorna: O valor digitado pelo usu√°rio ou <code>null</code> se cancelado</li>
        </ul>
        <br/>
        <h3>Exemplos Pr√°ticos</h3>
        <h3>Exemplo 1: Capturando um nome</h3>
        <pre>let nomeUsuario = prompt("Qual √© o seu nome?");
if (nomeUsuario) {
    console.log("Bem-vindo, " + nomeUsuario + "!");
} else {
    console.log("Voc√™ n√£o digitou um nome.");
}</pre>
        
        <h3>Exemplo 2: Calculadora simples</h3>
        <pre>let numero1 = parseFloat(prompt("Digite o primeiro n√∫mero:"));
let numero2 = parseFloat(prompt("Digite o segundo n√∫mero:"));
let operacao = prompt("Digite a opera√ß√£o (+, -, *, /):");

let resultado;
switch (operacao) {
    case '+':
        resultado = numero1 + numero2;
        break;
    case '-':
        resultado = numero1 - numero2;
        break;
    case '*':
        resultado = numero1 * numero2;
        break;
    case '/':
        resultado = numero2 !== 0 ? numero1 / numero2 : "Erro: divis√£o por zero";
        break;
    default:
        resultado = "Opera√ß√£o inv√°lida";
}

console.log("Resultado: " + resultado);</pre>
        
        <h3>Convertendo Tipos de Dados</h3>
        <p>O <code>prompt()</code> sempre retorna uma string. Para trabalhar com n√∫meros, precisamos converter:</p>
        <pre>// Converter para n√∫mero inteiro
let idade = parseInt(prompt("Digite sua idade:"));

// Converter para n√∫mero decimal
let preco = parseFloat(prompt("Digite o pre√ßo:"));

// Converter para n√∫mero (melhor m√©todo)
let quantidade = Number(prompt("Digite a quantidade:"));</pre>
        
        <h3>Valida√ß√£o B√°sica</h3>
        <p>Sempre valide a entrada do usu√°rio:</p>
        <pre>let valor;
do {
    valor = prompt("Digite um n√∫mero maior que 10:");
    if (valor === null) {
        console.log("Opera√ß√£o cancelada pelo usu√°rio");
        break;
    }
    valor = Number(valor);
} while (isNaN(valor) || valor <= 10);

console.log("Voc√™ digitou: " + valor);</pre>
        
        <h3>Recomenda√ß√µes para os Pr√≥ximos Exerc√≠cios</h3>
        <ol>
            <li><strong>Use prompt() para intera√ß√£o</strong>: Nos pr√≥ximos exerc√≠cios, utilize <code>prompt()</code> para receber dados do usu√°rio em vez de valores fixos no c√≥digo.</li>
            <li><strong>Valide as entradas</strong>: Sempre verifique se o usu√°rio digitou algo v√°lido.</li>
            <li><strong>Converta tipos quando necess√°rio</strong>: Lembre-se de converter strings para n√∫meros quando for fazer c√°lculos.</li>
            <li><strong>Trate cancelamentos</strong>: Considere que o usu√°rio pode clicar em "Cancelar" e seu c√≥digo deve lidar com isso.</li>
            <li><strong>Mantenha a interface amig√°vel</strong>: Use mensagens claras nos prompts para que o usu√°rio saiba o que digitar.</li>
        </ol>
        <br />
        <h3>Exerc√≠cio Pr√°tico</h3>
        <p>Crie um programa que:</p>
        <ol>
            <li>Pe√ßa ao usu√°rio para digitar dois n√∫meros</li>
            <li>Pe√ßa para escolher uma opera√ß√£o matem√°tica</li>
            <li>Exiba o resultado da opera√ß√£o</li>
            <li>Trate poss√≠veis erros (divis√£o por zero, entradas inv√°lidas, etc.)</li>
        </ol>
        
        <br />
        <h3>Observa√ß√µes Finais</h3>
        <p>Lembre-se: o <code>prompt()</code> √© uma ferramenta simples mas poderosa para criar interatividade em seus programas JavaScript!</p>
    `,
    markdownFile: null,
    code: `// Exemplo de uso do prompt
let nome = prompt("Por favor, digite seu nome:");
console.log("Ol√°, " + nome + "!");`,
    hint: `Use prompt() para receber entrada do usu√°rio e sempre valide se n√£o √© null ou vazio. \n 
    O m√©todo .trim() √© usado para remover espa√ßos em branco do in√≠cio e do final de uma string. Espa√ßos em branco incluem espa√ßos, tabs, quebras de linha e outros caracteres de whitespace.
\n
    if (nome && nome.trim() !== "") {
    console.log("Ol√°, " + nome.trim() + "!");
} else {
    console.log("Nome inv√°lido ou n√£o fornecido.");
}`,
    solution: `// Solicitar os dois n√∫meros
let num1 = prompt("Digite o primeiro n√∫mero:");
let num2 = prompt("Digite o segundo n√∫mero:");

// Converter para n√∫meros
num1 = Number(num1);
num2 = Number(num2);

// Verificar se s√£o n√∫meros v√°lidos
if (isNaN(num1) || isNaN(num2)) {
    console.log("Erro: Por favor, digite n√∫meros v√°lidos.");
} else {
    // Solicitar a opera√ß√£o
    let operacao = prompt("Escolha a opera√ß√£o (+, -, *, /):");
    
    let resultado;
    let operacaoValida = true;
    
    // Realizar a opera√ß√£o escolhida
    switch (operacao) {
        case '+':
            resultado = num1 + num2;
            break;
        case '-':
            resultado = num1 - num2;
            break;
        case '*':
            resultado = num1 * num2;
            break;
        case '/':
            if (num2 === 0) {
                console.log("Erro: Divis√£o por zero n√£o √© permitida.");
                operacaoValida = false;
            } else {
                resultado = num1 / num2;
            }
            break;
        default:
            console.log("Erro: Opera√ß√£o inv√°lida. Use +, -, * ou /.");
            operacaoValida = false;
    }
    
    // Exibir o resultado se a opera√ß√£o foi v√°lida
    if (operacaoValida) {
        console.log("Resultado: " + num1 + operacao + num2 + " = " + resultado");
    }
}`,
  },
];

// {
//   title: "Introdu√ß√£o ao JavaScript",
//   content: `
//       <p>JavaScript √© uma linguagem de programa√ß√£o que permite implementar funcionalidades complexas em p√°ginas web.</p>
//       <p>Nesta primeira li√ß√£o, vamos aprender como exibir mensagens no console.</p>
//       <p>Use <code>console.log()</code> para exibir informa√ß√µes no console. Por exemplo:</p>
//       <pre>console.log("Ol√°, Mundo!");</pre>
//       <p>Tente criar um programa que exiba "Meu primeiro programa em JavaScript!" no console.</p>
//   `,
//   // Nova propriedade: pode ser um caminho para arquivo Markdown ou null para usar content
//   markdownFile: null,
//   code: `// Escreva seu c√≥digo JavaScript aqui\nconsole.log("Ol√°, Mundo!");`,
//   hint: "Use console.log('Meu primeiro programa em JavaScript!') para resolver este exerc√≠cio.",
//   solution: `console.log("Meu primeiro programa em JavaScript!");`
//   },
//   {
//   title: "Vari√°veis e Tipos de Dados",
//   content: "", // Ser√° substitu√≠do pelo Markdown
//   markdownFile: "licoes/variaveis-tipos.md", // Exemplo de arquivo externo
//   code: `// Crie uma vari√°vel e exiba seu conte√∫do\nlet mensagem = "JavaScript √© legal!";\nconsole.log(mensagem);`,
//   hint: "Use let mensagem = 'JavaScript √© incr√≠vel!'; seguido de console.log(mensagem);",
//   solution: `let mensagem = "JavaScript √© incr√≠vel!";\nconsole.log(mensagem);`
// }
